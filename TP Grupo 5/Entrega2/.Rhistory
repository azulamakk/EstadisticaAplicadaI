n <- length(datos)
booleano <- datos <= x
frec_abs <- sum(booleano)
return(frec_abs/n)
}
funcionEmpirica(200,y)
plot(funcionEmpirica)
plot(funcionEmpirica(datos))
plot(funcionEmpirica(y))
plot(funcionEmpirica(x))
plot(funcionEmpirica(x, y))
mean(x<=300)
funcionEmpirica <- function(y, datos)
{
n <- length(datos)
booleano <- datos <= y
frec_abs <- sum(booleano)
return(frec_abs/n)
}
funcionEmpirica(200,y)
plot(funcionEmpirica(y, datos))
plot(funcionEmpirica(y, x))
plot(funcionEmpirica(y, 200))
plot(funcionEmpirica(y, 200))
mean(x<=300)
funcionEmpirica <- function(y, datos)
{
n <- length(datos)
booleano <- datos <= y
frec_abs <- sum(booleano)
return(frec_abs/n)
}
funcionEmpirica(200,y)
plot(funcionEmpirica(y, 200))
plot(funcionEmpirica(200, y))
#Funcion empirica
mean(x<=300)
funcionEmpirica <- function(y, datos)
{
n <- length(datos)
booleano <- datos <= y
frec_abs <- sum(booleano)
return(frec_abs/n)
}
funcionEmpirica(200,y)
plot(funcionEmpirica(200, y))
mean(x<=300)
funcionEmpirica <- function(y, x)
{
n <- length(x)
booleano <- x <= y
frec_abs <- sum(booleano)
return(frec_abs/n)
}
funcionEmpirica(200,y)
plot(funcionEmpirica(200, y))
plot(funcionEmpirica(x, y))
plot(funcionEmpirica(y, x))
plot(funcionEmpirica(x, n))
plot(funcionEmpirica([0:400], y))
plot(funcionEmpirica([0:400], y)
plot(funcionEmpirica({0:400}, y)
plot(funcionEmpirica({0:400}, y)
plot(funcionEmpirica((0:400), y)
plot(funcionEmpirica((0:400), y)
plot(funcionEmpirica((0:400), y))
plot(funcionEmpirica())
mean(x<=300)
funcionEmpirica <- function(y, x)
{
n <- length(x)
booleano <- x <= y
frec_abs <- sum(booleano)
return(frec_abs/n)
}
funcionEmpirica(200,y)
funcion_empirica(sort(y)[100], y)
y[100]
runif(0,400)
runif(0,400)
runif(0:400)
precioOrd = sort(y)
n=1:400
#Histograma datos originales
hist(precioOrd, col=topo.colors(5),=
main='Histograma datos originales')
plot(y, type = 'l')
#Funcion empirica
empirica <- function(x, a) {
return (sum(x<=a)/length(x))
}
fEmpirica = c()
for(i in 1: length(precioOrd)){
fEmpirica[i] <- empirica(precioOrd, precioOrd[i])
}
plot(precioOrd, fEmpirica)
Qm <- c()
Qm <- (precioOrd-mean(y)/sd(y))
Qm <- c()
Qm <- (precioOrd-mean(y)/sd(y))
Qm
esperanza
desvioest=sqrt(varianza)
desvioest
sd(precioOrdyMuestrt)
setwd("~/Desktop/Estadistica Aplicada I/TP Grupo 5/Entrega2")
data=read.csv('DS10.csv')
#Muestreo de datos - Realizado por grupo 10
data=data$prices.amountMax
x=as.numeric(data)
set.seed(66)
y=sample(x,300)
precioOrdyMuestr = sort(y)
n=1:400
#Histograma datos originales
hist(precioOrdyMuestr, col=topo.colors(5),=
main='Histograma datos originales')
plot(y, type = 'l')
#Funcion empirica
empirica <- function(x, a) {
return (sum(x<=a)/length(x))
}
fEmpirica = c()
for(i in 1: length(precioOrdyMuestr)){
fEmpirica[i] <- empirica(precioOrdyMuestr, precioOrdyMuestr[i])
}
plot(precioOrd, fEmpirica)
#Estandarizacion de los datos
Qm <- c()
Qm <- (precioOrd-mean(y)/sd(y))
Qm
#esperanza
esperanza=mean(precioOrdyMuestr)
esperanza
#varianza
varianza=mean((precioOrdyMuestr-esperanza)^2)
varianza
var(precioOrdyMuestr)
#Desvio estandard
desvioest=sqrt(varianza)
desvioest
sd(precioOrdyMuestrt)
#coef de asimetria
coefdeasimetria=sum(((precioOrdyMuestr-esperanza)/desvioest)^3)/400
coefdeasimetria
#coef de curtosis
coefdecurtosis= sum(((precioOrdyMuestr-esperanza)/desvioest)^4)/400
coefdecurtosis
#quantiles
q0.25=quantile(precioOrdyMuestr,0.25,type=1)
q0.50=quantile(precioOrdyMuestr,0.5,type=1)
q0.75=quantile(precioOrdyMuestrt,0.75,type=1)
q0.25
q0.50
q0.75
normalizado=rnorm(y)
plot(normalizado,type="l")
setwd("~/Desktop/Estadistica Aplicada I/TP Grupo 5/Entrega2")
data=read.csv('DS10.csv')
#Muestreo de datos - Realizado por grupo 10
data=data$prices.amountMax
x=as.numeric(data)
set.seed(66)
y=sample(x,300)
precioOrdyMuestr = sort(y)
n=1:400
#Histograma datos originales
hist(precioOrdyMuestr, col=topo.colors(5),
main='Histograma datos originales')
plot(y, type = 'l')
#Funcion empirica
empirica <- function(x, a) {
return (sum(x<=a)/length(x))
}
fEmpirica = c()
for(i in 1: length(precioOrdyMuestr)){
fEmpirica[i] <- empirica(precioOrdyMuestr, precioOrdyMuestr[i])
}
plot(precioOrd, fEmpirica)
#Estandarizacion de los datos
Qm <- c()
Qm <- (precioOrd-mean(y)/sd(y))
Qm
#esperanza
esperanza=mean(precioOrdyMuestr)
esperanza
#varianza
varianza=mean((precioOrdyMuestr-esperanza)^2)
varianza
var(precioOrdyMuestr)
#Desvio estandard
desvioest=sqrt(varianza)
desvioest
sd(precioOrdyMuestrt)
#coef de asimetria
coefdeasimetria=sum(((precioOrdyMuestr-esperanza)/desvioest)^3)/400
coefdeasimetria
#coef de curtosis
coefdecurtosis= sum(((precioOrdyMuestr-esperanza)/desvioest)^4)/400
coefdecurtosis
#quantiles
q0.25=quantile(precioOrdyMuestr,0.25,type=1)
q0.50=quantile(precioOrdyMuestr,0.5,type=1)
q0.75=quantile(precioOrdyMuestrt,0.75,type=1)
q0.25
q0.50
q0.75
normalizado=rnorm(y)
plot(normalizado,type="l")
setwd("~/Desktop/Estadistica Aplicada I/TP Grupo 5/Entrega2")
data=read.csv('DS10.csv')
#Muestreo de datos - Realizado por grupo 10
data=data$prices.amountMax
x=as.numeric(data)
set.seed(66)
y=sample(x,300)
precioOrdyMuestr = sort(y)
n=1:400
#Histograma datos originales
hist(precioOrdyMuestr, col=topo.colors(5),
main='Histograma datos originales')
plot(y, type = 'l')
#Funcion empirica
empirica <- function(x, a) {
return (sum(x<=a)/length(x))
}
fEmpirica = c()
for(i in 1: length(precioOrdyMuestr)){
fEmpirica[i] <- empirica(precioOrdyMuestr, precioOrdyMuestr[i])
}
plot(precioOrd, fEmpirica)
#Estandarizacion de los datos
Qm <- c()
Qm <- (precioOrd-mean(y)/sd(y))
Qm
#esperanza
esperanza=mean(precioOrdyMuestr)
esperanza
#varianza
varianza=mean((precioOrdyMuestr-esperanza)^2)
varianza
var(precioOrdyMuestr)
#Desvio estandard
desvioest=sqrt(varianza)
desvioest
sd(precioOrdyMuestr)
#coef de asimetria
coefdeasimetria=sum(((precioOrdyMuestr-esperanza)/desvioest)^3)/400
coefdeasimetria
#coef de curtosis
coefdecurtosis= sum(((precioOrdyMuestr-esperanza)/desvioest)^4)/400
coefdecurtosis
#quantiles
q0.25=quantile(precioOrdyMuestr,0.25,type=1)
q0.50=quantile(precioOrdyMuestr,0.5,type=1)
q0.75=quantile(precioOrdyMuestrt,0.75,type=1)
q0.25
q0.50
q0.75
normalizado=rnorm(y)
plot(normalizado,type="l")
setwd("~/Desktop/Estadistica Aplicada I/TP Grupo 5/Entrega2")
data=read.csv('DS10.csv')
#Muestreo de datos - Realizado por grupo 10
data=data$prices.amountMax
x=as.numeric(data)
set.seed(66)
y=sample(x,300)
precioOrdyMuestr = sort(y)
n=1:400
#Histograma datos originales
hist(precioOrdyMuestr, col=topo.colors(5),
main='Histograma datos originales')
plot(y, type = 'l')
#Funcion empirica
empirica <- function(x, a) {
return (sum(x<=a)/length(x))
}
fEmpirica = c()
for(i in 1: length(precioOrdyMuestr)){
fEmpirica[i] <- empirica(precioOrdyMuestr, precioOrdyMuestr[i])
}
plot(precioOrd, fEmpirica)
#Estandarizacion de los datos
Qm <- c()
Qm <- (precioOrd-mean(y)/sd(y))
Qm
#esperanza
esperanza=mean(precioOrdyMuestr)
esperanza
#varianza
varianza=mean((precioOrdyMuestr-esperanza)^2)
varianza
var(precioOrdyMuestr)
#Desvio estandard
desvioest=sqrt(varianza)
desvioest
sd(precioOrdyMuestr)
#coef de asimetria
coefdeasimetria=sum(((precioOrdyMuestr-esperanza)/desvioest)^3)/400
coefdeasimetria
#coef de curtosis
coefdecurtosis= sum(((precioOrdyMuestr-esperanza)/desvioest)^4)/400
coefdecurtosis
#quantiles
q0.25=quantile(precioOrdyMuestr,0.25,type=1)
q0.50=quantile(precioOrdyMuestr,0.5,type=1)
q0.75=quantile(precioOrdyMuestr,0.75,type=1)
q0.25
q0.50
q0.75
normalizado=rnorm(y)
plot(normalizado,type="l")
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l')
#Histograma de datos estandarizados
hist(Qm)
#Histograma datos originales
hist(precioOrdyMuestr, col=topo.colors(5),
main='Histograma datos originales')
#Histograma datos originales
hist(precioOrdyMuestr, col=topo.colors(5),
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(8), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(5), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
library(colorspace)
#Histograma datos originales
hist(precioOrdyMuestr, col=brewer.pal(4, “Set3”)), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l')
#Histograma datos originales
hist(precioOrdyMuestr, col=brewer.pal(4, “Set3”)), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(5), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=cm.colors(5), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=heat.colors(5), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(5), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(8), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(8), breaks =18,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(8), breaks =18,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(8), breaks =18,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(8), breaks = 28,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
#Histograma datos originales
hist(precioOrdyMuestr, col=terrain.colors(8), breaks = 8,
main='Histograma datos originales', xlab='Precio', ylab = 'Frecuencia')
for(i in 1: length(precioOrdyMuestr)){
fEmpirica[i] <- empirica(precioOrdyMuestr, precioOrdyMuestr[i])
}
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica)
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica, main='Funcion Empirica')
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica, main='Funcion Empirica', xlab = 'Precio', ylab = 'Frecuencia Acumulada')
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col='blue')
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col=terrain.colors(300))
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col=terrain.colors(10))
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col=heat.colors(10))
pch = 15, col = rgb(0, 0, valcol)
col = rgb(0, 0, valcol)
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col = rgb(0, 0, valcol))
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col = brewer.pal(4, “Set3”))
#Grafico de la funcion empirica
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col = colorspaces(diverge_hsl))
q4
q4
install.packages("colorspace", repos = "https://R-Forge.R-project.org")
hcl_palettes(plot = TRUE)
q4 <- qualitative_hcl(4, palette = "Dark 3")
q4
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col = paletteer_c("ggthemes::Blue", 30))
col = hex(#5586B3))
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col = hex('#5586B3'))
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col = rbg('#5586B3'))
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col = 'light blue')
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Frecuencia Acumulada',
col = 'dark green')
plot(precioOrd, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Probabilidad Acumulada',
col = 'dark green')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l', col=terrain.colors(8))
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l', col=terrain.colors(8), xlab='x', ylab='Precio')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l', col=terrain.colors(8), xlab='x', ylab='Precio', main='Grafico de tendencias')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l', col=terrain.colors(8), xlab='x', ylab='Precio', main='Grafico de tendencias')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, x, type = 'l', col=terrain.colors(8), xlab='x', ylab='Precio', main='Grafico de tendencias')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l', col=terrain.colors(8), xlab='x', ylab='Precio', main='Grafico de tendencias')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(x, y, type = 'l', col=terrain.colors(8), xlab='x', ylab='Precio', main='Grafico de tendencias')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(x, type = 'l', col=terrain.colors(8), xlab='x', ylab='Precio', main='Grafico de tendencias')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(x, y, type = 'l', col=terrain.colors(8), xlab='x', ylab='Precio', main='Grafico de tendencias')
#Grafico de tendencia de la variable precio ya muestreada (esto lo hicimos para
#Asegurarnos de que no haya tendencias y ver si existían outliers significativos)
plot(y, type = 'l', col=terrain.colors(8), xlab='x', ylab='Precio', main='Grafico de tendencias')
plot(precioOrdyMuestr, fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Probabilidad Acumulada',
col = 'dark green')
plot(precioOrdy , fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Probabilidad Acumulada',
col = 'dark green')
plot(precioOrd , fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Probabilidad Acumulada',
col = 'dark green')
plot(precioOrdyMuestr , fEmpirica, main='Funcion Empirica',
xlab = 'Precio', ylab = 'Probabilidad Acumulada',
col = 'dark green')
esperanza
varianza
var(precioOrdyMuestr)
sd(precioOrdyMuestr)
#Coef de asimetria
coefdeasimetria=sum(((precioOrdyMuestr-esperanza)/desvioest)^3)/400
coefdeasimetria
coefdecurtosis
Qm <- (precioOrdyMuestr-mean(y)/sd(y))
Qm
q0.25
q0.25
q0.50
q0.75
#Histograma de datos estandarizados
hist(Qm)
hist(Qm, col=terrain.colors(8), breaks = 8,
main='Histograma datos estandarizados', xlab='Precio', ylab = 'Frecuencia')
plot(normalizado,type="l")
plot(normalizado,type="l", col=terrain.colors(8))
plot(normalizado,type="l", col=terrain.colors(8), xlab = 'x', ylab='')
plot(normalizado,type="l", col=terrain.colors(8), xlab = 'x', ylab='', main='')
plot(normalizado,type="l", col=terrain.colors(), xlab = 'x', ylab='', main='')
#Estandarizacion de los datos
Qm <- c()
plot(normalizado,type="l", col=terrain.colors(8), xlab = 'x', ylab='', main='')
#Coef de curtosis
coefdecurtosis= sum(((precioOrdyMuestr-esperanza)/desvioest)^4)/300
coefdecurtosis
coefdeasimetria
